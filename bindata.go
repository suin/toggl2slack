// Code generated by go-bindata.
// sources:
// status.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _statusPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x00\x61\x0e\x36\x06\x06\x06\xf9\xcf\xff\x13\x19\x18\x18\x23\x33\x9d\x9d\x03\x3c\x9d\x9d\x15\x02\x8a\xf2\xd3\x32\x73\x52\x19\x18\x34\x26\x26\x27\x24\x04\x79\xea\x68\x9c\x48\x4c\x4c\x48\x38\x71\x56\x5b\x93\xab\xa8\x3c\xa8\xa3\xa3\x27\x28\x61\xff\xf9\x03\x47\x0f\x1c\x3f\x70\xfa\xc0\xc1\x84\x99\x33\x62\x62\x1e\x48\x08\x3c\x60\x0e\x39\xc4\xb0\x38\xf0\xe0\xf6\x6c\x9e\x1e\x85\x5f\x9b\xf4\x4e\xac\x59\xbe\xfb\x67\xda\x92\xf7\xa5\xd6\xaf\xf7\x9e\x57\xcd\x5f\x5f\xf2\x92\xc7\xe7\xab\x46\x83\xb6\xea\x56\x0b\x49\x8f\xff\x8c\x8f\xae\x3c\x69\x5a\x24\xc4\xc6\x76\x4c\x44\x21\x7a\xe7\x9e\x25\x0c\x47\xde\x31\x6c\x72\xed\x6a\xe8\x63\xda\xf4\xbc\xe1\xc6\x4b\x81\x6f\x6c\x02\xd6\x9c\x87\xec\x98\xc2\x84\x85\x9e\xf0\xa4\xdc\x67\xd8\x24\x3a\xc9\x58\xa8\x31\xcd\xe0\x1f\xc3\xa6\xd2\x49\x13\x8e\x5c\x9e\x78\x23\xa0\xda\xb1\xe1\xb6\xea\xe6\x1d\x0a\xea\x1b\x83\x14\x0f\xcc\x68\xc8\x3e\xc9\xa0\xba\x52\x54\x55\xe1\x96\xe5\xfe\x05\x9b\x34\x8c\x6d\x17\xbb\x1c\x14\x94\xf0\x5a\xc9\x35\xaf\xf2\x64\x95\x15\x97\x1b\x5b\xdb\x32\x1e\x9e\x05\x06\xed\x2b\xfe\xc9\x70\xf0\x79\xbb\x6d\x34\xe6\xd8\xf8\xec\x37\x0f\xcf\xb6\xdf\xff\xff\xff\xdf\x2f\xad\xf8\x6c\xeb\xfc\xc6\xc4\xc5\x96\x06\x3f\xca\x94\x8e\x98\xe8\x48\x48\xb0\xec\x94\x94\xf0\x7b\xa3\xe3\xa1\xe3\xc5\xc2\x6d\xc8\x6c\x18\x1c\x25\xc5\x7c\x58\x3d\xa1\xe2\x23\x9b\x81\x01\x47\x7e\x72\xc2\x83\x3f\xc1\x73\xd2\x72\x58\xa6\xa5\x3f\x29\x4c\x4a\x48\xd8\xfb\xfd\xff\xff\x74\x53\x36\xb6\x6f\x27\x79\x78\xea\xd5\xff\xfc\xff\x5f\x7d\xf1\xff\xff\x7a\x71\x66\xd3\xfb\x89\x09\x16\x13\xd8\x19\xdc\xff\xa7\xcf\x76\xe8\xb3\x8f\x65\x60\x60\xe0\x2c\xf0\x88\x2c\x66\x60\xe0\x16\x06\x61\x46\x86\x59\x73\x24\xc0\x21\x1f\x12\x51\x12\xe1\xeb\x63\x95\x9c\x9f\xab\x97\x98\x92\x9f\x94\xaa\x57\x91\x5b\xc0\x00\x02\x36\x15\x56\x15\xb9\x05\xb9\xa9\x25\x89\x0a\x15\xb9\x39\x79\xc5\x56\x15\xb6\x4a\x60\x15\x56\x79\xc5\x56\x20\x61\x7d\x25\x05\xb0\x92\x92\x6c\x5b\xa5\x08\xdf\x00\x05\xe7\xfc\xa2\x54\x05\x53\x3d\x13\x3d\x03\x25\x3b\x2e\x05\x05\x05\x9b\xa2\x94\x34\xab\x20\x17\x37\xa8\xf6\xa2\x94\x34\x5b\xa5\x8c\x92\x92\x02\x2b\x7d\xfd\xf2\xf2\x72\xbd\x72\x63\xbd\xfc\xa2\x74\x7d\x43\x4b\x4b\x4b\x7d\x03\x23\x7d\x23\x23\xdd\xa2\x94\x34\xdd\xe2\xca\xbc\x92\xc4\x0a\xdd\xbc\x62\x65\x88\x21\x30\x73\x5c\x52\x8b\x93\x8b\x32\x0b\x4a\x32\xf3\xf3\x14\x40\xfc\xc4\xa4\xfc\xd2\x12\x5b\x25\x25\xa8\x1a\x08\x80\x58\x54\x92\x99\x86\xb0\x29\xaf\x18\xea\xad\xe4\xfc\x5c\x7d\x90\x8c\xbe\xa1\x9e\x81\x3e\xdc\x6c\x90\xf1\x20\x51\x2b\xff\xa2\xcc\xd4\xbc\x92\x44\x90\xf9\x76\x86\x36\xfa\x18\x62\x30\xb7\xe8\xa3\x39\x06\xe2\x53\x7d\xa8\x57\xed\xb8\x6c\xf4\xe1\xc1\x66\xc7\xe5\x73\x48\x3d\x92\x81\x81\xb9\xc6\xd3\xc5\x31\xc4\x42\xd0\x77\x72\x6c\x46\x74\xaa\xc4\xf1\xf9\xcf\x6d\xd5\xd5\x2d\x6f\x5e\x9a\x36\xf9\xf2\x8c\x25\xd9\xab\x97\x6d\xe6\xd3\xf4\xf6\x0e\x9e\xc8\x32\xe7\xf2\xc9\x16\xcd\x14\x63\x66\xc1\xf0\x3d\x13\x9a\xcc\xe3\x38\xaa\x14\xc3\x72\x04\x5b\x7d\xf7\x06\xe9\x34\x3d\x58\x3b\x57\x64\xbb\x91\xc8\x33\x11\x1f\xae\x68\x75\x15\xb1\x95\x27\x7f\x25\xfa\x64\xe7\xec\x9b\xb5\xfe\x59\x45\x51\xd1\xb9\xd7\xbf\xd9\xb8\xab\xf5\xf9\xde\x1f\xfd\x6c\xfd\xfe\xff\xff\xfa\x79\xec\x8d\xb2\x5c\x0e\x02\x07\x1e\x7d\x4f\xd1\x91\xda\x78\x6a\x6a\x77\x83\x81\xa7\x37\xeb\x55\x9f\xb5\xcc\x7c\x9a\xaa\x89\x39\xaf\xf4\x0a\x77\xed\xe3\xd4\xd3\x3b\xf6\x3e\xfd\x83\x40\x5f\xfb\x61\xbd\xdf\x79\x69\x7c\x77\xef\x49\x4e\x3f\xae\x3d\xfb\xa9\xd0\x8d\xf9\x36\xbc\xef\x8a\xf5\x0f\x1c\xbc\x95\x1f\xf0\xfb\x09\x73\x46\xe7\xa4\x36\x0f\x31\x93\xd2\x04\xb3\x49\x1e\x26\xff\xd2\x19\x2d\x74\x66\xdf\xba\xbe\x97\xb9\x39\xf0\xb0\x5a\xe3\xb4\xd3\x41\xc6\x85\xed\x55\xeb\xe3\x96\x1e\xd7\x8b\x69\xb8\x76\x7f\xf7\x8c\x7d\x5f\x8c\x4e\xe5\x89\xaa\x06\xb6\xbc\xba\xb6\x57\xf5\xac\xb2\xbf\xfb\x3a\x55\xa9\x18\xde\x35\x76\x37\xfe\xbf\xfc\xb6\xfa\xf2\x96\x89\x9e\x97\xd3\xcc\x56\x2f\x5f\x16\xff\x72\x0d\xc3\x8c\x97\xfd\x76\x5b\x74\x2e\x6f\xd1\xf8\x1d\xf6\x3f\xe2\xfd\x8b\xab\xab\xe2\xe2\xe3\x97\x4b\xeb\xbb\x69\xa6\x5b\x68\xab\x25\x6f\xf4\x78\x7e\xee\xbc\xb1\x95\xf7\x21\xc3\x82\x35\xba\x56\x73\x27\x09\xd9\xf2\x07\x29\x30\x9c\x0a\x5e\xde\x38\x4b\x6d\xc1\xd9\xb6\xbd\x8b\xfb\x3f\x55\x25\x6d\xe3\xbb\xd5\x76\x57\x31\x71\x7e\xba\x9a\x64\x77\x8d\x76\xd3\xb5\x0e\xd9\x8d\x3c\x91\xb7\x6f\x2f\x8e\xb2\xd3\xdf\x21\xf1\xc2\xfa\xb7\xcc\xd1\xe2\xf3\xca\x82\x2c\x7c\xa5\xfd\x57\xf3\x2e\xd7\xe7\xdd\x3d\x74\xea\xeb\x7b\x16\xe5\xdd\xae\xb1\x71\xf3\x6b\x36\xc4\xef\xd4\x90\xca\xde\xdf\xf6\xeb\xfe\xbc\xf6\x85\x2f\x2a\x5f\x7d\xf9\x19\x61\xcc\xc0\xb2\x5b\x76\x8d\x1f\xbb\xd4\xec\xd9\x1f\xf2\x13\xf9\xef\x2c\xd4\x74\x78\xb6\x77\x5f\x95\xb4\xd4\xfc\xfa\x46\xb3\x6b\x16\x9f\x3f\x16\xb6\x2c\xb6\x9d\xac\x74\x56\x2c\xf4\xf9\x0d\x09\x8b\xbf\x75\xa7\xf6\x08\xe9\xcd\xec\x50\x12\x13\xe6\xfc\xf1\xfa\xca\xca\x77\xaf\xbf\xf5\xf2\xbe\xe0\x64\x09\xa8\xfd\xa6\xc3\xb1\x49\x78\xae\xb2\xf2\xb4\x7d\x9b\x98\x6e\xf1\x9f\x5e\xa5\x31\xc7\x86\x71\xea\xd3\xd7\x17\x74\x44\x1c\x6e\xdf\x63\xfb\x3e\xd3\x78\x01\xcb\xf1\x83\xef\x5e\xbe\xe7\x6b\xbb\xc0\xbe\x40\x9c\x9b\xc1\x66\x72\x27\xe7\x32\x35\x16\x0f\x8e\x2b\x22\xac\xa7\xa6\xaf\x6f\xe8\x58\xb5\xfc\xca\xbf\xa7\xcb\x1f\x4f\x3d\x2d\xbf\xf8\x60\xfa\x2b\x2e\xc7\x6f\xcc\xaf\xaa\x2c\x1a\xf8\x8f\x3e\x56\xe0\xff\xf1\xf0\xc4\x03\x85\x70\x27\x4e\xee\xc9\x2b\x97\xb0\x5b\x5b\xdf\xf0\x59\x7a\xa3\x61\xa7\xb7\x92\x40\x84\xe8\xaf\x29\xea\x1e\x15\x5c\xb1\x8f\x27\x4f\xd3\x96\x78\xf3\xeb\xb9\x65\xc5\xa1\x87\xeb\x58\xaf\x79\x25\x28\x32\x4d\x54\x59\xb1\xfc\x72\xc9\xeb\xaf\xd7\x3b\x94\xb7\xb3\x1e\x8a\x78\xa1\xa7\x58\x7b\x2a\xc9\x76\xfe\xe5\x39\x8d\x8f\x25\x2a\x9e\xc7\x5e\xfe\xfd\xc5\x78\x4a\xfa\x01\xcf\xc9\x8e\xae\xcf\x4c\x8d\xed\xd9\xf7\x30\xc7\xb4\xbe\xf9\x3e\xbb\xef\x1f\xfb\x06\xd5\x1b\x26\x76\xb7\x54\x76\xec\x10\x59\x3e\xf5\x51\xd3\x92\xcc\x0b\x37\xef\x4f\xbf\x75\x75\x55\xe0\xf9\x14\x9f\xb0\x33\xe5\xcd\xd3\xf6\xef\x77\xfc\x7e\x7f\xfe\x66\xad\xd3\xd7\x7d\xae\xa5\x39\x9f\x7f\xae\xba\xfb\x2c\x9b\x46\x07\x77\x8d\xbe\x4b\x18\xcb\xaf\x0b\x9d\x37\x5f\xf9\x95\x49\x3c\xbb\xdf\xfd\x4a\xd7\x37\x4b\xf9\xd2\x45\xfd\xfd\x8b\xf8\x42\x97\x7e\x52\x5e\x7c\x21\xc5\xf4\x58\xd4\xa4\x94\xfb\x55\xc1\x13\x4a\x64\x57\xed\xb4\x9f\x6e\x72\xd4\x9c\xfb\x40\xce\x87\x56\x89\x73\x4f\xbf\x78\x1f\xb6\x35\xef\x79\x2b\xbb\x73\xf2\xf9\xb9\x53\x4e\xb3\x4a\xaf\x90\x33\x89\xd6\xcd\xf9\x57\x21\xec\x9a\xb5\x60\xf1\x72\xf1\xd9\xb3\x25\x7d\x77\x7f\xff\x9d\xee\xee\x5e\x93\xef\x73\x67\x4f\xfe\x4c\x3e\xf3\x49\xab\x3d\xf7\x89\x74\x3b\xac\x15\x33\x0e\xda\xee\x5c\xb2\x7d\xd9\xa4\x8f\xc7\x27\x68\x64\x4d\x6c\x3f\xfb\xf9\xd1\xb4\xca\xbb\x8a\x9f\xe5\x4f\x5f\x9b\xe3\x78\xfc\x5d\x68\x34\xa8\x48\xf3\x74\xf5\x73\x59\xe7\x94\xd0\x04\x08\x00\x00\xff\xff\xb3\xe3\x80\xcd\x94\x06\x00\x00")

func statusPngBytes() ([]byte, error) {
	return bindataRead(
		_statusPng,
		"status.png",
	)
}

func statusPng() (*asset, error) {
	bytes, err := statusPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "status.png", size: 1684, mode: os.FileMode(420), modTime: time.Unix(1488947955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"status.png": statusPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"status.png": &bintree{statusPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

